#include <iostream>
#include "EasySDL/v6/EasySDL.hpp"
#include "Geometry/v2/geometry.hpp"
#include <vector>
#include <array>

#include "hsv2rgb.hpp"

using namespace std;

const unsigned int nbSamples=20;
const int winSize=1000;
const bool hidden=true;

struct MousePattern
{
 vector<GVector<2> > rawSampling;
 array<GVector<2>, nbSamples> constSampled;

 void clear() {rawSampling.clear();}
 void reSample()
 {
  for (unsigned int i=0; i<nbSamples; i++) constSampled[i]=GVector<2>({0,0});

  double tot=0;
  for (unsigned int i=0; i<rawSampling.size(); i++) tot+=rawSampling[i].len();

  int iSample=0;
  double pos=0;
  for (unsigned int i=0; i<rawSampling.size(); i++)
  {
   double sampleEnd=(iSample+1)*(tot/nbSamples);
   double endPos=pos+rawSampling[i].len();
   while (endPos>sampleEnd)
   {
    double prop=(sampleEnd-pos)/rawSampling[i].len();
    constSampled[iSample]+=rawSampling[i]*prop*(nbSamples/tot);
    iSample++;
    pos=sampleEnd;
    if (iSample==nbSamples)
    {
     cout << "out by " << endPos-sampleEnd << endl;
     return;
    }
    sampleEnd=(iSample+1)*(tot/nbSamples);
   }

   constSampled[iSample]+=rawSampling[i]*(nbSamples/tot);

   pos=endPos;
  }
 }
} curPattern;

void dispPattern(array<GVector<2>, nbSamples> pat, int y)
{
 for (unsigned int i=0; i<nbSamples; i++)
 {
  Rgb color=hsv2rgb(Hsv((pat[i][1]<0)*2*M_PI+atan2(pat[i][1], pat[i][0]), 1, 1));
  window::place(draw::createRect(winSize/nbSamples, 50, color.r*255, color.g*255, color.b*255), true, i*winSize/nbSamples, y);
 }
}

double percentMatch(array<GVector<2>, nbSamples> pat1, array<GVector<2>, nbSamples> pat2)
{
 double tot=0;
 const double maxDelta=M_PI/3;

 for (unsigned int i=0; i<nbSamples; i++)
 {
  if (abs(angle(pat1[i], pat2[i]))<maxDelta)
  {
   tot+=(1-abs(angle(pat1[i], pat2[i]))/maxDelta)/nbSamples;
  }
 }
 return tot;
}

bool recording=false;
int lx, ly;
vector<int> trailX;
vector<int> trailY;
int match=-1;

vector<array<double, nbSamples> > anglePatterns;
vector<array<GVector<2>, nbSamples> > vecPatterns;
vector<string> patternName;

void startRec(int x, int y)
{
 curPattern.clear();
 trailX.clear();
 if (hidden) trailX.push_back(winSize/2);
 else trailX.push_back(mouseX);
 trailY.clear();
 if (hidden) trailY.push_back(winSize/2);
 else trailY.push_back(mouseY);
 recording=true;
 lx=mouseX;
 ly=mouseY;
}

void stopRec(int x, int y)
{
 curPattern.reSample();
 recording=false;

 match=-1;
 double bestPercent=2/4.0;
 for (unsigned int i=0; i<vecPatterns.size(); i++)
 {
  double percent=percentMatch(curPattern.constSampled, vecPatterns[i]);
  if (percent>bestPercent)
  {
   if (match!=-1) cout << "~\n";
   match=i;
   bestPercent=percent;
  }
 }

 if (hidden) SDL_WarpMouse(winSize/2, winSize/2);
}

void addSample(int x, int y)
{
 if ((x==winSize/2) && (y==winSize/2)) return;
 if (recording)
 {
  if (hidden)
  {
   trailX.push_back(trailX.back()+(x-winSize/2)/5);
   trailY.push_back(trailY.back()+(y-winSize/2)/5);
  }
  else
  {
   trailX.push_back(x);
   trailY.push_back(y);
  }
  curPattern.rawSampling.push_back(GVector<2>({double(x-winSize/2),double(winSize/2-y)}));
  lx=x;
  ly=y;
 }

 if (hidden) SDL_WarpMouse(winSize/2, winSize/2);
}

int main()
{
 initEasySDL(winSize, winSize, "Pattern Match");
 TTF_Font *font=NULL;
 text::load("font.ttf", 50, &font);

 SDL_Cursor *cursor;
 int32_t cursorData[2] = {0, 0};
 cursor = SDL_CreateCursor((Uint8 *)cursorData, (Uint8 *)cursorData, 8, 8, 4, 4);
 if (hidden) SDL_SetCursor(cursor);

 #define ADDPAT(name) anglePatterns.push_back({F(0), F(1), F(2), F(3), F(4), F(5), F(6), F(7), F(8), F(9), F(10), F(11), F(12), F(13), F(14), F(15), F(16), F(17), F(18), F(19)}); patternName.push_back(name)

 array<string, 8> dirName={"E", "NE", "N", "NW", "W", "SW", "S", "SE"};

 for (unsigned int i=0; i<8; i++)
 {
  #define F(x) (i*M_PI/4)
  ADDPAT(dirName[i]);
  #undef F

  #define F(x) (x<nbSamples/2 ? i*M_PI/4 : i*M_PI/4+M_PI)
  ADDPAT(dirName[i]+"'");
  #undef F

  #define F(x) ((x<nbSamples/3) || (x>2*nbSamples/3) ? i*M_PI/4 : i*M_PI/4+M_PI)
  ADDPAT(dirName[i]+"''");
  #undef F

  #define F(x) (x<nbSamples/2 ? i*M_PI/4-M_PI/8 : i*M_PI/4-7*M_PI/8)
  ADDPAT(dirName[i]+" arrow");
  #undef F

  #define F(x) (x<nbSamples/2 ? i*M_PI/4+M_PI/8 : i*M_PI/4+7*M_PI/8)
  ADDPAT(dirName[i]+" arrow");
  #undef F

  #define F(x) (i*M_PI/4-M_PI/(nbSamples-1)*x)
  ADDPAT(dirName[i]+" arc");
  #undef F

  #define F(x) (i*M_PI/4+M_PI/(nbSamples-1)*x)
  ADDPAT(dirName[i]+" arc");
  #undef F

  #define F(x) ((x<nbSamples/3) || (x>2*nbSamples/3) ? i*M_PI/4 : i*M_PI/4+5*M_PI/6)
  ADDPAT(dirName[i]+" zig");
  #undef F

  #define F(x) ((x<nbSamples/3) || (x>2*nbSamples/3) ? i*M_PI/4 : i*M_PI/4-5*M_PI/6)
  ADDPAT(dirName[i]+" zig");
  #undef F

  #define F(x) (i*M_PI/4+M_PI/2-x*2*M_PI/(nbSamples-1))
  ADDPAT(dirName[i]+" circle");
  #undef F

  #define F(x) (i*M_PI/4-M_PI/2+x*2*M_PI/(nbSamples-1))
  ADDPAT(dirName[i]+" circle");
  #undef F

  #define F(x) (i*M_PI/4+M_PI/2-cos((1-cos(x*M_PI/(nbSamples-1)))*M_PI/2)*3*M_PI/4)
  ADDPAT(dirName[i]+" cross");
  #undef F

  #define F(x) (i*M_PI/4-M_PI/2+cos((1-cos(x*M_PI/(nbSamples-1)))*M_PI/2)*3*M_PI/4)
  ADDPAT(dirName[i]+" cross");
  #undef F
 }


 for (unsigned int iP=0; iP<anglePatterns.size(); iP++)
 {
  vecPatterns.push_back(array<GVector<2>, nbSamples>());
  for (unsigned int iS=0; iS<nbSamples; iS++)
  {
   vecPatterns.back()[iS]=GVector<2>({cos(anglePatterns[iP][iS]), sin(anglePatterns[iP][iS])});
  }
 }

 mouseButtonLeftDown=startRec;
 mouseButtonLeftUp=stopRec;
 mouseMotion=addSample;


 bool disp=false;
 while (true)
 {
  window::events();
  if (quit) break;

  if (disp) dispPattern(curPattern.constSampled, 50);
  if (match>=0)
  {
   if (disp) dispPattern(vecPatterns[match], 100);
   window::place(text::create(patternName[match], font, 255, 255, 255), true, winSize/2, 150, x_center);
  }
  else
  {
   window::place(text::create("No matchign pattern", font, 255, 255, 255), true, winSize/2, 150, x_center);
  }

  for (unsigned int i=1; i<trailX.size(); i++)
  {
   if (hidden && recording) break;
   thickLineRGBA(surface, trailX[i-1], trailY[i-1], trailX[i], trailY[i], 3, 255, 255, 255, SDL_ALPHA_OPAQUE);
  }


  window::refresh();
  waitFromLastWait(20);
 }

 SDL_FreeCursor(cursor);
}
